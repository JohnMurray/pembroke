version: 2.1

# Define image to run all builds/tests under
executors:
  docker_ubuntu:
    docker:
      - image: ubuntu:20.04

commands:
  image_setup:
    description: 'Setup the container image for all CI runs'
    steps:
      - checkout
      - run:
          name: Update APT Repos
          command: apt-get update

      - run:
          name: Build Tools Setup
          command: ./.circleci/build_tools_setup.sh

      - run:
          name: Install 3rd Party Dependencies
          command: >-
            mkdir -p build &&
            cd build &&
            conan install ../pembroke --build=missing --env CC=/usr/bin/clang-10 --env CXX=/usr/bin/clang++-10
      
      - run:
          name: Doc Tools Setup
          command: apt-get install -y doxygen && pip install -U sphinx breathe sphinx_rtd_theme
  build_pembroke:
    description: 'Build pembroke'
    parameters:
      sanitizer:
        type: string
        default: none
      build_mode:
        type: string
        default: debug
    steps:
      - run:
          name: CMake Setup
          command: ./.circleci/cmake_setup.sh --with-sanitizer '<< parameters.sanitizer >>' --compilation-mode '<< parameters.build_mode >>'
      - run:
          name: Build Library
          command: cd build && cmake --build . -- -j2 tests
      - run:
          name: Test Library
          command: mkdir -p /tmp/test-out && ./build/pembroke/bin/tests --reporter=junit --out=/tmp/test-out/test-results.xml
      - store_test_results:
          path: /tmp/test-out/
  build_docs:
    description: 'Build Sphinx Documentation'
    steps:
      - run:
          name: CMake Setup
          command: ./.circleci/cmake_setup.sh
      - run:
          name: Build Documentation
          command: cd build && cmake --build . -- -j2 sphinx
        
          

jobs:
  # Compile and test with all optimizations, do not run with any
  # sanitizers
  build:
    executor: docker_ubuntu
    steps:
      - image_setup
      - build_pembroke:
          build_mode: release

  # ASAN build/test in debug mode
  test_asan:
    executor: docker_ubuntu
    steps:
      - image_setup
      - build_pembroke:
          sanitizer: asan

  # TSAN build/test in debug mode
  test_tsan:
    executor: docker_ubuntu
    steps:
      - image_setup
      - build_pembroke:
          sanitizer: tsan

  # UBSAN build/test in debug mode
  test_ubsan:
    executor: docker_ubuntu
    steps:
      - image_setup
      - build_pembroke:
          sanitizer: ubsan
  
  build_docs:
    executor: docker_ubuntu
    steps:
      - image_setup
      - build_docs


workflows:
  version: 2
  ci_workflow:
    jobs:
      - build
      - test_asan:
          requires: [build]
      - test_tsan:
          requires: [build]
      - test_ubsan:
          requires: [build]
      - build_docs:
          requires: [test_asan, test_tsan, test_ubsan]